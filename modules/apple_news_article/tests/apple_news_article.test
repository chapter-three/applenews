<?php

/**
 * @file
 * Contains tests for the Apple News module.
 */

module_load_include('inc', 'apple_news', 'apple_news.publisher_api');
module_load_include('inc', 'apple_news');
module_load_include('inc', 'apple_news', 'apple_news.batch');

/**
 * Test export to Apple News Format.
 */
class ApplenewsArticleExportTestCase extends ApplenewsWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return [
      'name' => t('Export article as defined by default profile to Apple News Format'),
      'description' => '',
      'group' => t('Apple News'),
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function setUp(array $modules = []) {
    parent::setUp(array_merge(['apple_news_article'], $modules));
  }

  /**
   * Test default article export using simple layout.
   */
  public function testExport() {

    // @see ImageFieldDefaultImagesTestCase::ImageFieldDefaultImagesTestCase()
    $file = current($this->drupalGetTestFiles('image'));
    $file = file_save($file);

    // Some node content.
    $contents = [
      [
        '_desc' => 'no image',
        'title' => $this->randomName(32),
        'body' => $this->randomName(64),
        'file' => NULL,
      ],
      [
        '_desc' => 'image',
        'title' => $this->randomName(32),
        'body' => $this->randomName(64),
        'image' => $file,
      ],
    ];

    // Create nodes.
    $map = [];
    foreach ($contents as $i => $content) {
      $settings = [
        'type' => 'article',
        'title' => $content['title'],
        'body' => [LANGUAGE_NONE => [['value' => $content['body']]]],
      ];
      if (isset($content['image'])) {
        $settings['field_image'] = [LANGUAGE_NONE => [['fid' => $content['image']->fid]]];
      }
      $node = $this->drupalCreateNode($settings);
      $this->assert($node->nid > 0, "Node \"${content['_desc']}\" created.");
      $map[$node->nid] = $i;
    }

    // Load export object.
    /** @var ApplenewsExportArticle $export */
    $export = apple_news_get_export('apple_news_article', 'article');
    $this->assert($export instanceof ApplenewsExportArticle,
      "Export object loaded.");

    // Enable export.
    $export->enabled = TRUE;
    $export = apple_news_export_save($export);
    $this->assert($export->enabled, 'Export enabled.');

    // Run query to get source ids.
    /** @var EntityFieldQuery $query */
    $query = $export->query();
    $this->assert($query instanceof EntityFieldQuery, 'Query object loaded.');
    $result = $query->execute();
    $a = array_keys($map);
    $b = array_keys($result['node']);
    $this->assert(!array_diff($a, $b) && !array_diff($b, $a), 'Query result.');

    // Export each.
    foreach (array_keys($result['node']) as $nid) {
      $content = $contents[$map[$nid]];

      $document = $export->export(node_load($nid));
      $this->assert($document instanceof \ChapterThree\AppleNews\Document,
        "Export document for node \"${content['_desc']}\" loaded.");
      $json = $document->json();
      $this->pass(var_export($json, TRUE));
      $data = json_decode($json);
      $this->assert(is_object($data) && !empty($data),
        "Document exported.");

      $this->assertEqual($nid, $data->identifier,
        'Export node nid -> identifier.');
      $this->assertEqual($content['title'], $data->title,
        'Export node title -> title.');

      $item = $data->components[0];
      $this->assertEqual('body', $item->role,
        'Export body component role.');
      $this->assertEqual('markdown', $item->format,
        'Export body component format.');
      $markdown = new \ChapterThree\AppleNews\Document\Markdown();
      $expected = $markdown->convert($content['body']);
      $this->assertEqual(trim($expected), trim($item->text),
        'Export body component text -> component 1 text.');

      if (!empty($content['image'])) {
        $item = $data->components[1];
        $this->assertEqual('photo', $item->role,
          'Export image component role.');
        $this->assertEqual(drupal_realpath($content['image']->uri),
          @$export->getAssets()[$item->URL],
          'Export image component uri -> component 2 url.');
      }
    }
  }

  /**
   * Test default article export using header_image layout.
   */
  public function testExportLayout2() {

    // @see ImageFieldDefaultImagesTestCase::ImageFieldDefaultImagesTestCase()
    $file = current($this->drupalGetTestFiles('image'));
    $file = file_save($file);

    // Some node content.
    $contents = [
      [
        '_desc' => 'default',
        'title' => $this->randomName(32),
        'body' => $this->randomName(64),
        'image' => $file,
      ],
    ];

    // Create nodes.
    $map = [];
    foreach ($contents as $i => $content) {
      $settings = [
        'type' => 'article',
        'title' => $content['title'],
        'body' => [LANGUAGE_NONE => [['value' => $content['body']]]],
      ];
      if (isset($content['image'])) {
        $settings['field_image'] = [LANGUAGE_NONE => [['fid' => $content['image']->fid]]];
      }
      $node = $this->drupalCreateNode($settings);
      $this->assert($node->nid > 0, "Node \"${content['_desc']}\" created.");
      $map[$node->nid] = $i;
    }

    // Load export object.
    /** @var ApplenewsExportArticle $export */
    $export = apple_news_get_export('apple_news_article', 'article');
    $this->assert($export instanceof ApplenewsExportArticle,
      "Export object loaded.");

    // Enable export.
    $export->enabled = TRUE;
    $export->settings = ['layout' => 'header_image'];
    $export = apple_news_export_save($export);
    $this->assert($export->enabled, 'Export enabled.');

    // Run query to get source ids.
    /** @var EntityFieldQuery $query */
    $query = $export->query();
    $this->assert($query instanceof EntityFieldQuery, 'Query object loaded.');
    $result = $query->execute();
    $a = array_keys($map);
    $b = array_keys($result['node']);
    $this->assert(!array_diff($a, $b) && !array_diff($b, $a), 'Query result.');

    // Export each.
    foreach (array_keys($result['node']) as $nid) {
      $content = $contents[$map[$nid]];

      $document = $export->export(node_load($nid));
      $this->assert($document instanceof \ChapterThree\AppleNews\Document,
        "Export document for node \"${content['_desc']}\" loaded.");
      $json = $document->json();
      $this->pass(var_export($json, TRUE));
      $data = json_decode($json);
      $this->assert(is_object($data) && !empty($data), "Document exported.");

      $this->assertEqual($nid, $data->identifier,
        'Export node nid -> identifier.');
      $this->assertEqual($content['title'], $data->title,
        'Export node title -> title.');

      $i = 0;

      $item = $data->components[$i++];
      $this->assertEqual('title', $item->role,
        'Export title component role.');
      $this->assertEqual('titleLayout', $item->layout,
        'Export title component layout.');
      $this->assertEqual('titleStyle', $item->textStyle,
        'Export title component textStyle.');
      $this->assertEqual($content['title'], $item->text,
        'Export title component body -> component 1 text.');

      $item = $data->components[$i++];
      $this->assertEqual('header', $item->role,
        'Export header component role.');
      $this->assertEqual('headerImageLayout', $item->layout,
        'Export header component layout.');
      $this->assertEqual('image', $item->style->fill->type,
        'Export header fill type.');
      $this->assertEqual('cover', $item->style->fill->fillMode,
        'Export header fill fillMode.');
      $this->assertEqual('center', $item->style->fill->verticalAlignment,
        'Export header fill verticalAlignment.');
      $this->assertEqual(drupal_realpath($content['image']->uri),
        @$export->getAssets()[$item->style->fill->URL],
        'Export image uri -> header fill url.');

      $item = $data->components[$i++];
      $this->assertEqual('author', $item->role,
        'Export author component role.');
      $this->assertEqual('authorLayout', $item->layout,
        'Export header component layout.');
      $this->assertEqual('authorStyle', $item->textStyle,
        'Export header component textStyle.');

      $item = $data->components[$i++];
      $this->assertEqual('body', $item->role,
        'Export body component role.');
      $this->assertEqual('markdown', $item->format,
        'Export body component format.');
      $markdown = new \ChapterThree\AppleNews\Document\Markdown();
      $expected = $markdown->convert($content['body']);
      $this->assertEqual(trim($expected), trim($item->text),
        $item->text, "Export body component text -> component ${i} text.");

    }
  }

}
