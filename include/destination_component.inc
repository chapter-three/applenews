<?php

/**
 * @file
 * Component Destination classes.
 */

use \ChapterThree\AppleNews\Document\Anchor;
use \ChapterThree\AppleNews\Document\Components;
use \ChapterThree\AppleNews\Document\GalleryItem;
use \ChapterThree\AppleNews\Document\Markdown;
use \ChapterThree\AppleNews\Document\Styles;

/**
 * Base class for component destinations.
 */
abstract class ApplenewsDestinationComponent extends ApplenewsDestination {

  /**
   * Destination object(s), to be returned by export().
   *
   * @var array
   *   Array of \ChapterThree\AppleNews\Document\Components\Component objects.
   */
  public $destinations;

  /**
   * Settings for this destination.
   *
   * @var ApplenewsDestinationComponentLayout|string
   *   ComponentLayout object for this component.
   */
  public $layout;

  /**
   * Implements __sleep().
   */
  public function __sleep() {
    return array_merge([
      'layout',
    ], parent::__sleep());
  }

  /**
   * Determines if the configuration is complete.
   *
   * @return bool
   *   If FALSE, then export() will return an empty array.
   */
  public function validateSettings() {
    if ($this->layout && !$this->export->getComponentLayout($this->layout)) {
      return FALSE;
    }
    return parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $options = [
      '' => t('- none -'),
    ];
    /** @var ApplenewsDestinationLayout $component_layout */
    foreach ($this->export->getComponentLayouts() as $component_layout) {
      $options[$component_layout->id] = $component_layout->label();
    }
    $form['settings']['layout'] = [
      '#title' => t('Layout'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $this->layout,
    ];

    $form = parent::getConfigForm($form, $form_state);

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigForm($form, &$form_state) {
    if ($form_state['values']['layout']) {
      $this->layout = $form_state['values']['settings']['layout'];
    }
    parent::submitConfigForm($form, $form_state);
  }

  /**
   * Applies the configured layout to component objects.
   *
   * @param \ChapterThree\AppleNews\Document\Components\Component $component
   *   A destination component generated by this class.
   */
  protected function setComponentLayout(\ChapterThree\AppleNews\Document\Components\Component $component) {
    if (@$this->layout) {
      if ($this->layout instanceof ApplenewsDestinationComponentLayout) {
        /** @var \ChapterThree\AppleNews\Document\Layouts\ComponentLayout $layout */
        $layout = $this->layout->export();
      }
      else {
        /** @var string $layout */
        $layout = $this->layout;
      }
      $component->setLayout($layout);
    }
  }

}

/**
 * Container component.
 */
class ApplenewsDestinationContainer extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function isLeaf() {
    return FALSE;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    $container = new Components\Container();

    // @todo
    // /** @var ApplenewsDestinationComponent $component */
    // foreach ($this->export->getChildComponents($this) as $component) {
    //   $container->addComponent($component->export($value));
    // }

    $this->setComponentLayout($container);
    return [$container];
  }

}

/**
 * Body component.
 */
class ApplenewsDestinationBody extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'text'   => NULL,
      'format' => 'markdown',
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function validateSettings() {
    return $this->validateSettingsSources(['text']) &&
      parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    parent::getConfigFormSourceElement($form, $form_state, 'text');
    $form['settings']['text']['#title'] = t('Text');
    $form['settings']['text']['#required'] = TRUE;

    $form['settings']['format'] = [
      '#title'         => t('Format'),
      '#type'          => 'select',
      '#options'       => [
        ''         => t('None'),
        'markdown' => t('Markdown'),
      ],
      '#default_value' => $this->getSetting('format'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('text'));

    $markdown = FALSE;
    if ($this->getSetting('format') == 'markdown') {
      $markdown = new Markdown();
    }

    $components = [];

    foreach ($values as $value) {
      $body = $value[$key];
      if ($markdown) {
        $body = $markdown->convert($body);
      }
      if (empty($body)) {
        continue;
      }
      $body = new Components\Body($body);
      if ($markdown) {
        $body->setFormat($this->getSetting('format'));
      }
      $this->setComponentLayout($body);
      $components[] = $body;
    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;
  }

}

/**
 * Body with embedded images.
 */
class ApplenewsDestinationBodyPhoto extends ApplenewsDestinationBody {

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {
    $form = parent::getConfigForm($form, $form_state);

    // @todo add layout for images.
    $form['layout']['#title'] = t('Layout (body)');

    return $form;
  }

  /**
   * Create image object for inline images.
   *
   * @param string $path
   *   Path as generated by ApplenewsExport::addAsset().
   *
   * @return \ChapterThree\AppleNews\Document\Components\Photo
   *   Photo component.
   */
  public function exportCreateImage($path) {
    return new Components\Photo($path);
  }

  /**
   * Converts an HTML string into a series of Body and image components.
   *
   * @param string $value
   *   HTML string.
   *
   * @return array
   *   List of components.
   */
  public function exportConvertHtml($value) {
    $components = [];

    // Convert to markdown, leaving image elements inline.
    $markdown = new Markdown(['img']);
    $value = $markdown->convert($value);
    if (empty($value)) {
      return $components;
    }

    // Inline images, keyed on position.
    $images = [];
    // Create image components from inline image tags and remove from markdown.
    // @todo This regex may be a bit simplistic.
    if (preg_match_all("/<img\s[^>]+>/", $value, $matches)) {
      foreach ($matches[0] as $match) {
        // Create image component.
        $image = FALSE;
        if (preg_match("/(?<=\ssrc=\")[^\"]+/", $match, $src)) {
          if ($path = $this->export->addAsset($src[0])) {
            /** @var ChapterThree\AppleNews\Document\Components\Photo $image */
            $image = $this->exportCreateImage($path);
          }
        }
        // Remove tag.
        $start = strpos($value, $match);
        $value = substr_replace($value, '', $start, strlen($match));
        // Anchor.
        if ($image) {
          $images[$start] = $image;
        }
      }
    }
    $id = $this->export->generateIdentifier();
    $body = new Components\Body($value, $id);
    $body->setFormat('markdown');
    $this->setComponentLayout($body);
    $components[] = $body;

    /** @var ChapterThree\AppleNews\Document\Components\Photo $image */
    foreach ($images as $start => $image) {
      $anchor = new Anchor('bottom');
      $anchor->setOriginAnchorPosition('bottom')
        ->setTargetComponentIdentifier($id)
        ->setRangeStart($start)
        ->setRangeLength(1);
      $image->setAnchor($anchor);
      // @todo Apply layout.
      $components[] = $image;
    }

    return $components;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('text'));

    $components = [];

    foreach ($values as $value) {
      $components[] = array_merge($$components,
        $this->exportConvertHTML($value[$key]));
    }

    return $components;
  }

}

/**
 * Mosaic or Gallery component.
 */
class ApplenewsDestinationImages extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'type'    => 'gallery',
      'items'   => NULL,
      'caption' => NULL,
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function validateSettings() {
    return $this->validateSettingsSources(['items']) &&
      parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    $form['settings']['type'] = [
      '#title'         => t('Type'),
      '#required'      => TRUE,
      '#type'          => 'select',
      '#options'       => [
        'gallery' => t('Gallery'),
        'mosaic'  => t('Mosaic'),
      ],
      '#default_value' => $this->getSetting('type'),
    ];

    parent::getConfigFormSourceElement($form, $form_state, 'items');
    $form['settings']['items']['#title'] = t('Items');
    $form['settings']['items']['#required'] = TRUE;

    parent::getConfigFormSourceElement($form, $form_state, 'caption');
    $form['settings']['caption']['#title'] = t('Caption');
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('items'));
    list($key_caption, $values_caption) = $this->getSourceValues(
      $this->export->source, $this->getSetting('caption'));

    $components = [];
    foreach ($values as $i => $value) {
      if (empty($value[$key])) {
        continue;
      }
      $url = $this->export->addAsset($value[$key]);
      $item = new GalleryItem($url);
      if (!empty($values_caption[$i][$key_caption])) {
        $item->setCaption($values_caption[$i][$key_caption]);
      }
      $components[] = $item;
    }

    if (count($components)) {
      switch ($this->getSetting('type')) {

        case 'gallery':
          $components = [new Components\Gallery($components)];
          break;

        case 'mosaic':
          $components = [new Components\Mosaic($components)];
          break;

      }
    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;
  }

}

/**
 * Mosaic component.
 */
class ApplenewsDestinationAd extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'type'        => 'banner',
      'banner_type' => 'standard',
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    $form['settings']['type'] = [
      '#title'         => t('Type'),
      '#required'      => TRUE,
      '#type'          => 'select',
      '#options'       => [
        'banner'           => t('Banner'),
        'medium_rectangle' => t('Medium Rectangle'),
      ],
      '#default_value' => $this->getSetting('type'),
    ];

    $form['settings']['banner_type'] = [
      '#title'         => t('Banner Type'),
      '#type'          => 'select',
      '#options'       => [
        'any'           => t('Any'),
        'standard'      => t('Standard'),
        'double_height' => t('Double Height'),
        'large'         => t('Large'),
      ],
      '#default_value' => $this->getSetting('banner_type'),
      '#states'        => array(
        'visible' => array(
          ':input[name="type"]' => array('value' => 'banner'),
        ),
      ),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {

    $components = [];

    switch ($this->getSetting('type')) {

      case 'medium_rectangle':
        $components[0] = new Components\Advertisements\MediumRectangleAdvertisement();
        break;

      case 'banner':
        $components[0] = new Components\Advertisements\BannerAdvertisement();
        $components[0]->setBannerType($this->getSetting('banner_type'));
        break;

    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;

  }

}

/**
 * Image component.
 */
class ApplenewsDestinationImage extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'type'    => 'logo',
      'source'  => NULL,
      'caption' => NULL,
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function validateSettings() {
    return $this->validateSettingsSources(['source']) &&
      parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    $form['settings']['type'] = [
      '#title'         => t('Type'),
      '#type'          => 'select',
      '#options'       => [
        'logo' => t('Logo'),
      ],
      '#default_value' => $this->getSetting('type'),
    ];

    parent::getConfigFormSourceElement($form, $form_state, 'source');
    $form['settings']['source']['#title'] = t('Value');
    $form['settings']['source']['#required'] = TRUE;

    parent::getConfigFormSourceElement($form, $form_state, 'caption');
    $form['settings']['caption']['#title'] = t('Caption');

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('source'));
    list($key_caption, $values_caption) = $this->getSourceValues(
      $this->export->source, $this->getSetting('caption'));

    $components = [];

    foreach ($values as $i => $value) {
      if (empty($value[$key])) {
        continue;
      }
      $url = $this->export->addAsset($value[$key]);
      switch ($this->getSetting('type')) {
        case 'logo':
          $component = new Components\Logo($url);
          if (!empty($values_caption[$i][$key_caption])) {
            $component->setCaption($values_caption[$i][$key_caption]);
          }
          $components[] = $component;
          break;
      }
    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;
  }

}

/**
 * Scalable Image component.
 */
class ApplenewsDestinationScalableImage extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'type'                 => 'figure',
      'file'                 => NULL,
      'caption'              => NULL,
      'accessibilityCaption' => NULL,
      'explicitContent'      => NULL,
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function validateSettings() {
    return $this->validateSettingsSources([
      'file',
    ]) && parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    $form['settings']['type'] = [
      '#title'         => t('Type'),
      '#type'          => 'select',
      '#options'       => [
        'figure'   => t('Figure'),
        'photo'    => t('Photo'),
        'portrait' => t('Portrait'),
      ],
      '#default_value' => $this->getSetting('type'),
      '#description'   => t('The type of scalable image.'),
    ];

    parent::getConfigFormSourceElement($form, $form_state, 'file');
    $form['settings']['file']['#title'] = t('Value');

    parent::getConfigFormSourceElement($form, $form_state, 'caption');
    $form['settings']['caption']['#title'] = t('Caption');

    parent::getConfigFormSourceElement($form, $form_state,
      'accessibilityCaption');
    $form['settings']['accessibilityCaption']['#title'] = t('Accessibility Caption');

    parent::getConfigFormSourceElement($form, $form_state, 'explicitContent');
    $form['settings']['explicitContent']['#title'] = t('Explicit Content');

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('file'));
    list($key_caption, $values_caption) = $this->getSourceValues(
      $this->export->source, $this->getSetting('caption'));
    list($accessibility_caption_key, $accessibility_caption_value)
      = $this->getSourceValues($this->export->source,
          $this->getSetting('accessibilityCaption'));
    list($explicit_content_key, $explicit_content_value)
      = $this->getSourceValues($this->export->source,
          $this->getSetting('explicitContent'));

    $components = [];

    foreach ($values as $i => $value) {
      if (empty($value[$key])) {
        continue;
      }
      $url = $this->export->addAsset($value[$key]);
      switch ($this->getSetting('type')) {

        case 'photo':
          $component = new Components\Photo($url);
          break;

        case 'portrait':
          $component = new Components\Portrait($url);
          break;

        case 'figure':
          $component = new Components\Figure($url);
          break;

        default:
          continue 2;

      }
      if (!empty($accessibility_caption_value[$i][$accessibility_caption_key])) {
        $component->setAccessibilityCaption(
          $accessibility_caption_value[$i][$accessibility_caption_key]);
      }
      if (!empty($explicit_content_value[$i][$explicit_content_key])) {
        $component->setExplicitContent(TRUE);
      }
      if (!empty($values_caption[$i][$key_caption])) {
        $component->setCaption($values_caption[$i][$key_caption]);
      }
      $components[] = $component;
    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;
  }

}

/**
 * Text component.
 */
class ApplenewsDestinationText extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'text'      => NULL,
      'component' => 'author',
      'heading'   => 'heading',
      'format'    => 'markdown',
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function validateSettings() {
    return $this->validateSettingsSources(['text']) &&
      parent::validateSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    parent::getConfigFormSourceElement($form, $form_state, 'text');
    $form['settings']['text']['#title'] = t('Text');
    $form['settings']['text']['#required'] = TRUE;

    $form['settings']['component'] = [
      '#title'         => t('Component'),
      '#required'      => TRUE,
      '#type'          => 'select',
      '#options'       => [
        'author'       => t('Author'),
        'body'         => t('Body'),
        'byline'       => t('Byline'),
        'caption'      => t('Caption'),
        'heading'      => t('Heading'),
        'illustrator'  => t('Illustrator'),
        'intro'        => t('Intro'),
        'photographer' => t('Photographer'),
        'pullquote'    => t('Pullquote'),
        'quote'        => t('Quote'),
        'title'        => t('Title'),
      ],
      '#default_value' => $this->getSetting('component'),
    ];

    $form['settings']['heading'] = [
      '#title'         => t('Heading'),
      '#type'          => 'select',
      '#options'       => [
        'heading'  => t('Heading'),
        'heading1' => t('H1'),
        'heading2' => t('H2'),
        'heading3' => t('H3'),
        'heading4' => t('H4'),
        'heading5' => t('H5'),
        'heading6' => t('H6'),
      ],
      '#default_value' => $this->getSetting('heading'),
      '#states'        => [
        'visible' => [
          ':input[name="component"]' => ['value' => 'heading'],
        ],
      ],
    ];

    $form['settings']['format'] = [
      '#title'         => t('Format'),
      '#type'          => 'select',
      '#options'       => [
        ''         => t('None'),
        'markdown' => t('Markdown'),
      ],
      '#default_value' => $this->getSetting('format'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export() {
    list($key, $values) = $this->getSourceValues($this->export->source,
      $this->getSetting('text'));

    $markdown = new Markdown();

    $components = [];

    foreach ($values as $value) {
      $content = $value[$key];
      if ($this->getSetting('format') == 'markdown') {
        $content = $markdown->convert($content);
      }
      if (empty($content)) {
        continue;
      }
      switch ($this->getSetting('component')) {

        case 'author':
          $component = new Components\Author($content);
          break;

        case 'body':
          $component = new Components\Body($content);
          break;

        case 'byline':
          $component = new Components\Byline($content);
          break;

        case 'caption':
          $component = new Components\Caption($content);
          break;

        case 'heading':
          $component = new Components\Heading($content);
          $component->setRole($this->getSetting('heading'));
          break;

        case 'illustrator':
          $component = new Components\Illustrator($content);
          break;

        case 'intro':
          $component = new Components\Intro($content);
          break;

        case 'photographer':
          $component = new Components\Photographer($content);
          break;

        case 'pullquote':
          $component = new Components\Pullquote($content);
          break;

        case 'quote':
          $component = new Components\Quote($content);
          break;

        case 'title':
          $component = new Components\Title($content);
          break;

        default:
          continue 2;

      }
      if ($this->getSetting('format')) {
        $component->setFormat($this->getSetting('format'));
      }
      $components[] = $component;
    }

    array_map([$this, 'setComponentLayout'], $components);
    return $components;
  }

}

/**
 * Divider component.
 */
class ApplenewsDestinationDivider extends ApplenewsDestinationComponent {

  /**
   * {@inheritdoc}
   */
  public function settings() {
    return [
      'color' => '#000',
      'width' => 1,
      'style' => 'solid',
    ] + parent::settings();
  }

  /**
   * {@inheritdoc}
   */
  public function getConfigForm($form, &$form_state) {

    $form = parent::getConfigForm($form, $form_state);

    $form['settings']['color'] = [
      '#title' => t('Color'),
      '#type' => 'textfield',
      '#default_value' => $this->getSetting('color'),
      '#description'   => t('The stroke color, defined as a 3- to 8-character RGBA hexadecimal string; e.g., #000 for black or #FF00007F for red with an alpha (opacity) of 50%. Defaults to #000 (black).')
    ];

    $form['settings']['width'] = [
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#default_value' => $this->getSetting('width'),
      '#description'   => t('The width of the stroke line. Can be either an integer value in points, or a string (10pt). Defaults to 1 point.'),
    ];

    $form['settings']['style'] = [
      '#title' => t('Style'),
      '#type' => 'select',
      '#options' => [
        'solid' => t('Solid'),
        'dashed' => t('Dashed'),
        'dotted' => t('Dotted'),
      ],
      '#default_value' => $this->getSetting('style'),
      '#description'   => t('The stroke properties that apply to the horizontal line.'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function export($value = NULL) {
    $divider = new Components\Divider();
    if ($this->getSetting('color')) {
      $stroke = new Styles\StrokeStyle();
      $stroke->setColor($this->getSetting('color'));
      $stroke->setWidth((int) $this->getSetting('width'));
      $stroke->setStyle($this->getSetting('style'));
      $divider->setStroke($stroke);
    }
    $this->setComponentLayout($divider);
    return [$divider];
  }

}
